plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0" apply false
    id 'io.github.karlatemp.publication-sign' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm'
}

allprojects {
    group 'me.earzuchan.sakiko'
    version '0.11.4.514'


    repositories {
        mavenCentral()
    }

    tasks.withType(Jar).tap {
        configureEach {
            archiveBaseName.set("sakiko")
        }
    }
}

task uploadReleaseAssets {
    def ghToken = project.findProperty("ghToken") ?: ""
    def postUrl = project.findProperty("postUrl") ?: ""

    doLast {
        def artifactsDir = file('temp/artifacts').absolutePath
        def version = project.version.toString()

        if (ghToken.isBlank() || postUrl.isBlank()) {
            throw new IllegalArgumentException("GH_TOKEN or POST_URL is not set.")
        }

        def postUrlFormatted = postUrl.replaceAll("\\{.*\\}", "")

        println "Post url: ${postUrlFormatted}"

        def prefix = "SaKiKo-"
        def files = [:]

        file(artifactsDir).listFiles().each { dir ->
            if (dir.name.equalsIgnoreCase("Jars")) {
                dir.listFiles().each { f ->
                    files.put(f.name, f)
                }
            } else {
                dir.listFiles().each { f ->
                    def name = "${prefix}${dir.name}-${version}.${f.name.split("\\.").last()}"
                    files.put(name, f)
                }
            }
        }

        byte[] buf = new byte[20480]

        files.each { fileName, file ->
            def url = new URL("${postUrlFormatted}?name=${URLEncoder.encode(fileName as String, 'UTF-8')}")
            def connection = (HttpURLConnection) url.openConnection()
            connection.setRequestMethod("POST")
            connection.setRequestProperty("Accept", "application/vnd.github.v3+json")
            connection.setRequestProperty("Content-Length", file.length().toString())
            connection.setRequestProperty("Content-Type", "application/zip")
            connection.setRequestProperty("Authorization", "token ${ghToken}")
            connection.setDoOutput(true)

            file.withInputStream { input ->
                connection.outputStream.with { output ->
                    output << input
                    output.flush()
                }
            }

            if (connection.responseCode != 201) {
                def errorStream = connection.errorStream ?: connection.inputStream
                def errorMsg = errorStream.getText("UTF-8")
                throw new IOException(errorMsg)
            }

            println "Uploaded ${fileName} successfully."
        }
    }
}

task buildNativeOnMyPc(type: Exec) {
    commandLine 'C:\\Program Files\\Git\\bin\\bash.exe', '.scripts\\build_on_win.sh'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

kotlin {
    jvmToolchain(21)
}