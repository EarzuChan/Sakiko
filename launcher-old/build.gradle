plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" apply false
    id 'org.jetbrains.kotlin.jvm'

}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task packCore(type: ShadowJar) {
    archiveBaseName.set('jvm-hook-framework')

    configurations = [
            project(':core-old').configurations.runtimeClasspath,
            project(':extension-old').configurations.runtimeClasspath
    ]
    from project(':core-old').sourceSets.main.output
    from project(':extension-old').sourceSets.main.output

    archiveClassifier.set('core-old')
}

task packAll(type: Jar) {
    dependsOn ':launcher-old:copyApi'

    archiveBaseName.set('jvm-hook-framework')

    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    archiveClassifier.set('launcher')

    from(files(tasks.packCore.outputs)) { conf ->
        conf.into('io/github/karlatemp/jvmhook/launcher')
        conf.rename { 'classes.jar' }
    }

    manifest {
        attributes([
                'Premain-Class': 'io.github.karlatemp.jvmhook.launcher.Launcher'
        ])
    }
}

task copyApi(type: Copy) {
    into(new File(buildDir, 'libs'))
    from(project(':api-old').tasks.jar.outputs.files)
}

({
    def pck = UUID.randomUUID().toString() + '.' + UUID.randomUUID().toString()

    task randomObf_objSrc(type: ShadowJar) {
        archiveBaseName.set('jvm-hook-framework')

        from sourceSets.main.output
        dependsOn configurations.runtimeClasspath
        archiveClassifier.set('launcher')

        manifest {
            attributes([
                    'Premain-Class': pck + '.Launcher'
            ])
        }

        archiveClassifier.set('obf')
        relocate 'io.github.karlatemp.jvmhook.launcher', pck
    }

    task randomObf(type: Jar) {
        archiveBaseName.set('jvm-hook-framework')

        from(zipTree(tasks.randomObf_objSrc.outputs.files.first()))
        dependsOn tasks.randomObf_objSrc
        archiveClassifier.set('launcher-obf')

        from(files(tasks.packCore.outputs)) { conf ->
            conf.into(pck.replace('.', '/'))
            conf.rename { 'classes.jar' }
        }

        manifest {
            attributes([
                    'Premain-Class': pck + '.Launcher'
            ])
        }
        exclude 'io/**'
        exclude 'io'
    }
})()
repositories {
    mavenCentral()
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}
kotlin {
    jvmToolchain(21)
}
